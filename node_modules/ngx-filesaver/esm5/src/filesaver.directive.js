import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
var FileSaverDirective = /** @class */ (function () {
    function FileSaverDirective(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add("filesaver__not-support");
        }
    }
    FileSaverDirective.prototype.getName = function (res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    };
    FileSaverDirective.prototype._click = function () {
        var _this = this;
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        var req = this.http;
        if (!req) {
            var params = new HttpParams();
            var query = this.query || {};
            // tslint:disable-next-line:forin
            for (var item in query) {
                params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params: params,
            });
        }
        this.setDisabled(true);
        req.subscribe(function (res) {
            if (res.status !== 200 || res.body.size <= 0) {
                _this.error.emit(res);
                return;
            }
            _this.fss.save(res.body, _this.getName(res), null, _this.fsOptions);
            _this.success.emit(res);
        }, function (err) { return _this.error.emit(err); }, function () { return _this.setDisabled(false); });
    };
    FileSaverDirective.prototype.setDisabled = function (status) {
        var el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove']("filesaver__disabled");
    };
    FileSaverDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FileSaverService },
        { type: HttpClient }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "method", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Observable)
    ], FileSaverDirective.prototype, "http", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "query", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FileSaverDirective.prototype, "url", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FileSaverDirective.prototype, "fileName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "fsOptions", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "success", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], FileSaverDirective.prototype, "error", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FileSaverDirective.prototype, "_click", null);
    FileSaverDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, FileSaverService, HttpClient])
    ], FileSaverDirective);
FileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) { return new (t || FileSaverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FileSaverService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient)); };
FileSaverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSaverDirective, selectors: [["", "fileSaver", ""]], hostBindings: function FileSaverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FileSaverDirective_click_HostBindingHandler() { return ctx._click(); });
    } }, inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, exportAs: ["fileSaver"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSaverDirective, [{
        type: Directive,
        args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FileSaverService }, { type: ɵngcc1.HttpClient }]; }, { method: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], _click: [{
            type: HostListener,
            args: ['click']
        }], http: [{
            type: Input
        }], query: [{
            type: Input
        }], header: [{
            type: Input
        }], url: [{
            type: Input
        }], fileName: [{
            type: Input
        }], fsOptions: [{
            type: Input
        }] }); })();
    return FileSaverDirective;
}());
export { FileSaverDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1maWxlc2F2ZXIvc3JjL2ZpbGVzYXZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU12RDtJQVdFLDRCQUFvQixFQUFpQyxFQUFVLEdBQXFCLEVBQVUsVUFBc0I7UUFBaEcsT0FBRSxHQUFGLEVBQUUsQ0FBK0I7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFWM0csV0FBTSxHQUFHLEtBQUssQ0FBQztRQU9MLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztRQUNqRCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUdqRCxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFO1lBQzdCLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVPLG9DQUFPLEdBQWYsVUFBZ0IsR0FBdUI7UUFDckMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFHRCxtQ0FB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O0NBYjVHLEVBQUUsV0FBVyxXQUN0QixDQUFDLG5CQUNXLGtCQUFrQixDQStEOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0lBREEseUJBQUM7Q0FBQSxBQS9ERCxJQStEQztTQS9EWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBIb3N0TGlzdGVuZXIsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWxlU2F2ZXJPcHRpb25zIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBGaWxlU2F2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWxlc2F2ZXIuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmaWxlU2F2ZXJdJyxcbiAgZXhwb3J0QXM6ICdmaWxlU2F2ZXInLFxufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2F2ZXJEaXJlY3RpdmUge1xuICBASW5wdXQoKSBtZXRob2QgPSAnR0VUJztcbiAgQElucHV0KCkgaHR0cDogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QmxvYj4+O1xuICBASW5wdXQoKSBxdWVyeTogYW55O1xuICBASW5wdXQoKSBoZWFkZXI6IGFueTtcbiAgQElucHV0KCkgdXJsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZpbGVOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZzT3B0aW9uczogRmlsZVNhdmVyT3B0aW9ucztcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyPEh0dHBSZXNwb25zZTxCbG9iPj4oKTtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudD4sIHByaXZhdGUgZnNzOiBGaWxlU2F2ZXJTZXJ2aWNlLCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICBpZiAoIWZzcy5pc0ZpbGVTYXZlclN1cHBvcnRlZCkge1xuICAgICAgZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGBmaWxlc2F2ZXJfX25vdC1zdXBwb3J0YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXROYW1lKHJlczogSHR0cFJlc3BvbnNlPEJsb2I+KSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh0aGlzLmZpbGVOYW1lIHx8IHJlcy5oZWFkZXJzLmdldCgnZmlsZW5hbWUnKSB8fCByZXMuaGVhZGVycy5nZXQoJ3gtZmlsZW5hbWUnKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9jbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZnNzLmlzRmlsZVNhdmVyU3VwcG9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCByZXEgPSB0aGlzLmh0dHA7XG4gICAgaWYgKCFyZXEpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICAgIGZvciAoY29uc3QgaXRlbSBpbiBxdWVyeSkge1xuICAgICAgICBwYXJhbXMuc2V0KGl0ZW0sIHF1ZXJ5W2l0ZW1dKTtcbiAgICAgIH1cblxuICAgICAgcmVxID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QodGhpcy5tZXRob2QsIHRoaXMudXJsLCB7XG4gICAgICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgICAgcGFyYW1zLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICByZXEuc3Vic2NyaWJlKFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCB8fCByZXMuYm9keS5zaXplIDw9IDApIHtcbiAgICAgICAgICB0aGlzLmVycm9yLmVtaXQocmVzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mc3Muc2F2ZShyZXMuYm9keSwgdGhpcy5nZXROYW1lKHJlcyksIG51bGwsIHRoaXMuZnNPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQocmVzKTtcbiAgICAgIH0sXG4gICAgICBlcnIgPT4gdGhpcy5lcnJvci5lbWl0KGVyciksXG4gICAgICAoKSA9PiB0aGlzLnNldERpc2FibGVkKGZhbHNlKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREaXNhYmxlZChzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBlbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBlbC5kaXNhYmxlZCA9IHN0YXR1cztcbiAgICBlbC5jbGFzc0xpc3Rbc3RhdHVzID8gJ2FkZCcgOiAncmVtb3ZlJ10oYGZpbGVzYXZlcl9fZGlzYWJsZWRgKTtcbiAgfVxufVxuIl19
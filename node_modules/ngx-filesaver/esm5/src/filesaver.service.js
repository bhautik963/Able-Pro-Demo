import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
var FileSaverService = /** @class */ (function () {
    function FileSaverService() {
    }
    Object.defineProperty(FileSaverService.prototype, "isFileSaverSupported", {
        get: function () {
            try {
                return !!new Blob();
            }
            catch (e) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    FileSaverService.prototype.genType = function (fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1) {
            return 'text/plain';
        }
        var type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return "text/" + type;
            case 'json':
                return 'octet/stream';
            default:
                return "application/" + type;
        }
    };
    FileSaverService.prototype.save = function (blob, fileName, filtType, option) {
        if (!blob) {
            throw new Error('Data argument should be a blob instance');
        }
        var file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
        saveAs(file, decodeURI(fileName || 'download'), option);
    };
    FileSaverService.prototype.saveText = function (txt, fileName, option) {
        var blob = new Blob([txt]);
        this.save(blob, fileName, null, option);
    };
    FileSaverService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
FileSaverService.ɵfac = function FileSaverService_Factory(t) { return new (t || FileSaverService)(); };
FileSaverService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FileSaverService, factory: function (t) { return FileSaverService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSaverService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return FileSaverService;
}());
export { FileSaverService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtZmlsZXNhdmVyL3NyYy9maWxlc2F2ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFvQixNQUFNLFlBQVksQ0FBQzs7QUFHdEQ7SUFBQTtLQXdDQztJQXZDQyxzQkFBSSxrREFBb0I7YUFBeEI7WUFDRSxJQUFJO2dCQUNGLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7YUFDckI7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLEtBQUssQ0FBQzthQUNkO1FBQ0gsQ0FBQzs7O09BQUE7SUFFRCxrQ0FBTyxHQUFQLFVBQVEsUUFBaUI7UUFDdkIsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pELE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBQ0QsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVELFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxLQUFLO2dCQUNSLE9BQU8sWUFBWSxDQUFDO1lBQ3RCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxNQUFNO2dCQUNULE9BQU8sVUFBUSxJQUFNLENBQUM7WUFDeEIsS0FBSyxNQUFNO2dCQUNULE9BQU8sY0FBYyxDQUFDO1lBQ3hCO2dCQUNFLE9BQU8saUJBQWUsSUFBTSxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVELCtCQUFJLEdBQUosVUFBSyxJQUFVLEVBQUUsUUFBaUIsRUFBRSxRQUFpQixFQUFFLE1BQXlCO1FBQzlFLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pGLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsbUNBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxRQUFpQixFQUFFLE1BQXlCO1FBQ2hFLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7K0xBRTJMO0lBekNqTCxnQkFBZ0Isd0JBRDVCLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxRQUN0QixnQkFBZ0IsQ0F3QzVCOzs7OztnREFDRDsyQkE3Q0E7Q0E0Q0MsQUF4Q0QsSUF3Q0M7U0F4Q1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgc2F2ZUFzLCBGaWxlU2F2ZXJPcHRpb25zIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRmlsZVNhdmVyU2VydmljZSB7XG4gIGdldCBpc0ZpbGVTYXZlclN1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IEJsb2IoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2VuVHlwZShmaWxlTmFtZT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFmaWxlTmFtZSB8fCBmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpID09PSAtMSkge1xuICAgICAgcmV0dXJuICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IGZpbGVOYW1lLnN1YnN0cihmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0eHQnOlxuICAgICAgICByZXR1cm4gJ3RleHQvcGxhaW4nO1xuICAgICAgY2FzZSAneG1sJzpcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICByZXR1cm4gYHRleHQvJHt0eXBlfWA7XG4gICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgcmV0dXJuICdvY3RldC9zdHJlYW0nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGBhcHBsaWNhdGlvbi8ke3R5cGV9YDtcbiAgICB9XG4gIH1cblxuICBzYXZlKGJsb2I6IEJsb2IsIGZpbGVOYW1lPzogc3RyaW5nLCBmaWx0VHlwZT86IHN0cmluZywgb3B0aW9uPzogRmlsZVNhdmVyT3B0aW9ucyk6IHZvaWQge1xuICAgIGlmICghYmxvYikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIGFyZ3VtZW50IHNob3VsZCBiZSBhIGJsb2IgaW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoW2Jsb2JdLCB7IHR5cGU6IGZpbHRUeXBlIHx8IGJsb2IudHlwZSB8fCB0aGlzLmdlblR5cGUoZmlsZU5hbWUpIH0pO1xuICAgIHNhdmVBcyhmaWxlLCBkZWNvZGVVUkkoZmlsZU5hbWUgfHwgJ2Rvd25sb2FkJyksIG9wdGlvbik7XG4gIH1cblxuICBzYXZlVGV4dCh0eHQ6IHN0cmluZywgZmlsZU5hbWU/OiBzdHJpbmcsIG9wdGlvbj86IEZpbGVTYXZlck9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3R4dF0pO1xuICAgIHRoaXMuc2F2ZShibG9iLCBmaWxlTmFtZSwgbnVsbCwgb3B0aW9uKTtcbiAgfVxufVxuIl19
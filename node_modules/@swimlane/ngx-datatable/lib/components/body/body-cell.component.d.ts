import { ChangeDetectorRef, EventEmitter, ElementRef, ViewContainerRef, OnDestroy, DoCheck } from '@angular/core';
import { TableColumn } from '../../types/table-column.type';
import { SortDirection } from '../../types/sort-direction.type';
import * as ɵngcc0 from '@angular/core';
export declare type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';
export declare class DataTableBodyCellComponent implements DoCheck, OnDestroy {
    private cd;
    displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;
    set group(group: any);
    get group(): any;
    set rowHeight(val: number);
    get rowHeight(): number;
    set isSelected(val: boolean);
    get isSelected(): boolean;
    set expanded(val: boolean);
    get expanded(): boolean;
    set rowIndex(val: number);
    get rowIndex(): number;
    set column(column: TableColumn);
    get column(): TableColumn;
    set row(row: any);
    get row(): any;
    set sorts(val: any[]);
    get sorts(): any[];
    set treeStatus(status: TreeStatus);
    get treeStatus(): TreeStatus;
    activate: EventEmitter<any>;
    treeAction: EventEmitter<any>;
    cellTemplate: ViewContainerRef;
    get columnCssClasses(): any;
    get width(): number;
    get minWidth(): number;
    get maxWidth(): number;
    get height(): string | number;
    sanitizedValue: any;
    value: any;
    sortDir: SortDirection;
    isFocused: boolean;
    onCheckboxChangeFn: any;
    activateFn: any;
    cellContext: any;
    private _isSelected;
    private _sorts;
    private _column;
    private _row;
    private _group;
    private _rowHeight;
    private _rowIndex;
    private _expanded;
    private _element;
    private _treeStatus;
    constructor(element: ElementRef, cd: ChangeDetectorRef);
    ngDoCheck(): void;
    ngOnDestroy(): void;
    checkValueUpdates(): void;
    onFocus(): void;
    onBlur(): void;
    onClick(event: MouseEvent): void;
    onDblClick(event: MouseEvent): void;
    onKeyDown(event: KeyboardEvent): void;
    onCheckboxChange(event: any): void;
    calcSortDir(sorts: any[]): any;
    stripHtml(html: string): string;
    onTreeAction(): void;
    calcLeftMargin(column: any, row: any): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTableBodyCellComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTableBodyCellComponent, "datatable-body-cell", never, {
    "group": "group";
    "rowHeight": "rowHeight";
    "isSelected": "isSelected";
    "expanded": "expanded";
    "rowIndex": "rowIndex";
    "column": "column";
    "row": "row";
    "sorts": "sorts";
    "treeStatus": "treeStatus";
    "displayCheck": "displayCheck";
}, {
    "activate": "activate";
    "treeAction": "treeAction";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9keS1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJib2R5LWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3ksIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhYmxlQ29sdW1uIH0gZnJvbSAnLi4vLi4vdHlwZXMvdGFibGUtY29sdW1uLnR5cGUnO1xuaW1wb3J0IHsgU29ydERpcmVjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL3NvcnQtZGlyZWN0aW9uLnR5cGUnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBUcmVlU3RhdHVzID0gJ2NvbGxhcHNlZCcgfCAnZXhwYW5kZWQnIHwgJ2xvYWRpbmcnIHwgJ2Rpc2FibGVkJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGFUYWJsZUJvZHlDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjaywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkO1xuICAgIGRpc3BsYXlDaGVjazogKHJvdzogYW55LCBjb2x1bW4/OiBUYWJsZUNvbHVtbiwgdmFsdWU/OiBhbnkpID0+IGJvb2xlYW47XG4gICAgc2V0IGdyb3VwKGdyb3VwOiBhbnkpO1xuICAgIGdldCBncm91cCgpOiBhbnk7XG4gICAgc2V0IHJvd0hlaWdodCh2YWw6IG51bWJlcik7XG4gICAgZ2V0IHJvd0hlaWdodCgpOiBudW1iZXI7XG4gICAgc2V0IGlzU2VsZWN0ZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgaXNTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIHNldCBleHBhbmRlZCh2YWw6IGJvb2xlYW4pO1xuICAgIGdldCBleHBhbmRlZCgpOiBib29sZWFuO1xuICAgIHNldCByb3dJbmRleCh2YWw6IG51bWJlcik7XG4gICAgZ2V0IHJvd0luZGV4KCk6IG51bWJlcjtcbiAgICBzZXQgY29sdW1uKGNvbHVtbjogVGFibGVDb2x1bW4pO1xuICAgIGdldCBjb2x1bW4oKTogVGFibGVDb2x1bW47XG4gICAgc2V0IHJvdyhyb3c6IGFueSk7XG4gICAgZ2V0IHJvdygpOiBhbnk7XG4gICAgc2V0IHNvcnRzKHZhbDogYW55W10pO1xuICAgIGdldCBzb3J0cygpOiBhbnlbXTtcbiAgICBzZXQgdHJlZVN0YXR1cyhzdGF0dXM6IFRyZWVTdGF0dXMpO1xuICAgIGdldCB0cmVlU3RhdHVzKCk6IFRyZWVTdGF0dXM7XG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRyZWVBY3Rpb246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNlbGxUZW1wbGF0ZTogVmlld0NvbnRhaW5lclJlZjtcbiAgICBnZXQgY29sdW1uQ3NzQ2xhc3NlcygpOiBhbnk7XG4gICAgZ2V0IHdpZHRoKCk6IG51bWJlcjtcbiAgICBnZXQgbWluV2lkdGgoKTogbnVtYmVyO1xuICAgIGdldCBtYXhXaWR0aCgpOiBudW1iZXI7XG4gICAgZ2V0IGhlaWdodCgpOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgc2FuaXRpemVkVmFsdWU6IGFueTtcbiAgICB2YWx1ZTogYW55O1xuICAgIHNvcnREaXI6IFNvcnREaXJlY3Rpb247XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIG9uQ2hlY2tib3hDaGFuZ2VGbjogYW55O1xuICAgIGFjdGl2YXRlRm46IGFueTtcbiAgICBjZWxsQ29udGV4dDogYW55O1xuICAgIHByaXZhdGUgX2lzU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBfc29ydHM7XG4gICAgcHJpdmF0ZSBfY29sdW1uO1xuICAgIHByaXZhdGUgX3JvdztcbiAgICBwcml2YXRlIF9ncm91cDtcbiAgICBwcml2YXRlIF9yb3dIZWlnaHQ7XG4gICAgcHJpdmF0ZSBfcm93SW5kZXg7XG4gICAgcHJpdmF0ZSBfZXhwYW5kZWQ7XG4gICAgcHJpdmF0ZSBfZWxlbWVudDtcbiAgICBwcml2YXRlIF90cmVlU3RhdHVzO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBjaGVja1ZhbHVlVXBkYXRlcygpOiB2b2lkO1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbkRibENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uQ2hlY2tib3hDaGFuZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgY2FsY1NvcnREaXIoc29ydHM6IGFueVtdKTogYW55O1xuICAgIHN0cmlwSHRtbChodG1sOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgb25UcmVlQWN0aW9uKCk6IHZvaWQ7XG4gICAgY2FsY0xlZnRNYXJnaW4oY29sdW1uOiBhbnksIHJvdzogYW55KTogbnVtYmVyO1xufVxuIl19
import { OnChanges, OnInit, EventEmitter, ExistingProvider, ElementRef, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SelectDropdownComponent } from './select-dropdown.component';
import { IOption } from './option.interface';
import { Option } from './option';
import { OptionList } from './option-list';
import * as ɵngcc0 from '@angular/core';
export declare const SELECT_VALUE_ACCESSOR: ExistingProvider;
export declare class SelectComponent implements ControlValueAccessor, OnChanges, OnInit {
    private hostElement;
    options: Array<IOption>;
    allowClear: boolean;
    disabled: boolean;
    multiple: boolean;
    noFilter: number;
    highlightColor: string;
    highlightTextColor: string;
    notFoundMsg: string;
    placeholder: string;
    filterPlaceholder: string;
    label: string;
    opened: EventEmitter<null>;
    closed: EventEmitter<null>;
    selected: EventEmitter<IOption>;
    deselected: EventEmitter<IOption | IOption[]>;
    focus: EventEmitter<null>;
    blur: EventEmitter<null>;
    noOptionsFound: EventEmitter<string>;
    filterInputChanged: EventEmitter<string>;
    selectionSpan: ElementRef;
    dropdown: SelectDropdownComponent;
    filterInput: ElementRef;
    optionTemplate: TemplateRef<any>;
    private _value;
    optionList: OptionList;
    hasFocus: boolean;
    isOpen: boolean;
    isBelow: boolean;
    filterEnabled: boolean;
    filterInputWidth: number;
    private isDisabled;
    placeholderView: string;
    private clearClicked;
    private selectContainerClicked;
    private optionListClicked;
    private optionClicked;
    width: number;
    top: number;
    left: number;
    private onChange;
    private onTouched;
    constructor(hostElement: ElementRef);
    /** Event handlers. **/
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    onWindowBlur(): void;
    onWindowClick(): void;
    onWindowResize(): void;
    onSelectContainerClick(event: any): void;
    onSelectContainerFocus(): void;
    onSelectContainerKeydown(event: any): void;
    onOptionsListClick(): void;
    onDropdownOptionClicked(option: Option): void;
    onSingleFilterClick(): void;
    onSingleFilterFocus(): void;
    onFilterInput(term: string): void;
    onSingleFilterKeydown(event: any): void;
    onMultipleFilterKeydown(event: any): void;
    onMultipleFilterFocus(): void;
    onClearSelectionClick(event: any): void;
    onDeselectOptionClick(option: Option): void;
    /** API. **/
    open(): void;
    close(): void;
    clear(): void;
    select(value: string | Array<string>): void;
    /** ControlValueAccessor interface methods. **/
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /** Input change handling. **/
    private handleInputChanges;
    private updateOptionList;
    private updateFilterEnabled;
    /** Value. **/
    value: string | string[];
    private valueChanged;
    private updateState;
    /** Select. **/
    private selectOption;
    private deselectOption;
    private clearSelection;
    private toggleSelectOption;
    private selectHighlightedOption;
    private deselectLast;
    /** Dropdown. **/
    private toggleDropdown;
    private openDropdown;
    private closeDropdown;
    /** Filter. **/
    private filter;
    private clearFilterInput;
    private setMultipleFilterInput;
    /** Keys. **/
    private KEYS;
    private handleSelectContainerKeydown;
    private handleMultipleFilterKeydown;
    private handleSingleFilterKeydown;
    /** View. **/
    _blur(): void;
    _focus(): void;
    _focusSelectContainer(): void;
    private updateWidth;
    private updatePosition;
    private updateFilterWidth;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SelectComponent, "ng-select", never, {
    "options": "options";
    "allowClear": "allowClear";
    "disabled": "disabled";
    "multiple": "multiple";
    "noFilter": "noFilter";
    "notFoundMsg": "notFoundMsg";
    "placeholder": "placeholder";
    "filterPlaceholder": "filterPlaceholder";
    "label": "label";
    "highlightColor": "highlightColor";
    "highlightTextColor": "highlightTextColor";
}, {
    "opened": "opened";
    "closed": "closed";
    "selected": "selected";
    "deselected": "deselected";
    "focus": "focus";
    "blur": "blur";
    "noOptionsFound": "noOptionsFound";
    "filterInputChanged": "filterInputChanged";
}, ["optionTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzZWxlY3QuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThHQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uQ2hhbmdlcywgT25Jbml0LCBFdmVudEVtaXR0ZXIsIEV4aXN0aW5nUHJvdmlkZXIsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFNlbGVjdERyb3Bkb3duQ29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QtZHJvcGRvd24uY29tcG9uZW50JztcbmltcG9ydCB7IElPcHRpb24gfSBmcm9tICcuL29wdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9vcHRpb24nO1xuaW1wb3J0IHsgT3B0aW9uTGlzdCB9IGZyb20gJy4vb3B0aW9uLWxpc3QnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU0VMRUNUX1ZBTFVFX0FDQ0VTU09SOiBFeGlzdGluZ1Byb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgICBwcml2YXRlIGhvc3RFbGVtZW50O1xuICAgIG9wdGlvbnM6IEFycmF5PElPcHRpb24+O1xuICAgIGFsbG93Q2xlYXI6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbm9GaWx0ZXI6IG51bWJlcjtcbiAgICBoaWdobGlnaHRDb2xvcjogc3RyaW5nO1xuICAgIGhpZ2hsaWdodFRleHRDb2xvcjogc3RyaW5nO1xuICAgIG5vdEZvdW5kTXNnOiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBmaWx0ZXJQbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8bnVsbD47XG4gICAgY2xvc2VkOiBFdmVudEVtaXR0ZXI8bnVsbD47XG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxJT3B0aW9uPjtcbiAgICBkZXNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SU9wdGlvbiB8IElPcHRpb25bXT47XG4gICAgZm9jdXM6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBibHVyOiBFdmVudEVtaXR0ZXI8bnVsbD47XG4gICAgbm9PcHRpb25zRm91bmQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGZpbHRlcklucHV0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgc2VsZWN0aW9uU3BhbjogRWxlbWVudFJlZjtcbiAgICBkcm9wZG93bjogU2VsZWN0RHJvcGRvd25Db21wb25lbnQ7XG4gICAgZmlsdGVySW5wdXQ6IEVsZW1lbnRSZWY7XG4gICAgb3B0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgb3B0aW9uTGlzdDogT3B0aW9uTGlzdDtcbiAgICBoYXNGb2N1czogYm9vbGVhbjtcbiAgICBpc09wZW46IGJvb2xlYW47XG4gICAgaXNCZWxvdzogYm9vbGVhbjtcbiAgICBmaWx0ZXJFbmFibGVkOiBib29sZWFuO1xuICAgIGZpbHRlcklucHV0V2lkdGg6IG51bWJlcjtcbiAgICBwcml2YXRlIGlzRGlzYWJsZWQ7XG4gICAgcGxhY2Vob2xkZXJWaWV3OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjbGVhckNsaWNrZWQ7XG4gICAgcHJpdmF0ZSBzZWxlY3RDb250YWluZXJDbGlja2VkO1xuICAgIHByaXZhdGUgb3B0aW9uTGlzdENsaWNrZWQ7XG4gICAgcHJpdmF0ZSBvcHRpb25DbGlja2VkO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIHByaXZhdGUgb25DaGFuZ2U7XG4gICAgcHJpdmF0ZSBvblRvdWNoZWQ7XG4gICAgY29uc3RydWN0b3IoaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIC8qKiBFdmVudCBoYW5kbGVycy4gKiovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvbldpbmRvd0JsdXIoKTogdm9pZDtcbiAgICBvbldpbmRvd0NsaWNrKCk6IHZvaWQ7XG4gICAgb25XaW5kb3dSZXNpemUoKTogdm9pZDtcbiAgICBvblNlbGVjdENvbnRhaW5lckNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uU2VsZWN0Q29udGFpbmVyRm9jdXMoKTogdm9pZDtcbiAgICBvblNlbGVjdENvbnRhaW5lcktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25zTGlzdENsaWNrKCk6IHZvaWQ7XG4gICAgb25Ecm9wZG93bk9wdGlvbkNsaWNrZWQob3B0aW9uOiBPcHRpb24pOiB2b2lkO1xuICAgIG9uU2luZ2xlRmlsdGVyQ2xpY2soKTogdm9pZDtcbiAgICBvblNpbmdsZUZpbHRlckZvY3VzKCk6IHZvaWQ7XG4gICAgb25GaWx0ZXJJbnB1dCh0ZXJtOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uU2luZ2xlRmlsdGVyS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBvbk11bHRpcGxlRmlsdGVyS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBvbk11bHRpcGxlRmlsdGVyRm9jdXMoKTogdm9pZDtcbiAgICBvbkNsZWFyU2VsZWN0aW9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25EZXNlbGVjdE9wdGlvbkNsaWNrKG9wdGlvbjogT3B0aW9uKTogdm9pZDtcbiAgICAvKiogQVBJLiAqKi9cbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHNlbGVjdCh2YWx1ZTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPik6IHZvaWQ7XG4gICAgLyoqIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZSBtZXRob2RzLiAqKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKiBJbnB1dCBjaGFuZ2UgaGFuZGxpbmcuICoqL1xuICAgIHByaXZhdGUgaGFuZGxlSW5wdXRDaGFuZ2VzO1xuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9uTGlzdDtcbiAgICBwcml2YXRlIHVwZGF0ZUZpbHRlckVuYWJsZWQ7XG4gICAgLyoqIFZhbHVlLiAqKi9cbiAgICB2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgcHJpdmF0ZSB2YWx1ZUNoYW5nZWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVTdGF0ZTtcbiAgICAvKiogU2VsZWN0LiAqKi9cbiAgICBwcml2YXRlIHNlbGVjdE9wdGlvbjtcbiAgICBwcml2YXRlIGRlc2VsZWN0T3B0aW9uO1xuICAgIHByaXZhdGUgY2xlYXJTZWxlY3Rpb247XG4gICAgcHJpdmF0ZSB0b2dnbGVTZWxlY3RPcHRpb247XG4gICAgcHJpdmF0ZSBzZWxlY3RIaWdobGlnaHRlZE9wdGlvbjtcbiAgICBwcml2YXRlIGRlc2VsZWN0TGFzdDtcbiAgICAvKiogRHJvcGRvd24uICoqL1xuICAgIHByaXZhdGUgdG9nZ2xlRHJvcGRvd247XG4gICAgcHJpdmF0ZSBvcGVuRHJvcGRvd247XG4gICAgcHJpdmF0ZSBjbG9zZURyb3Bkb3duO1xuICAgIC8qKiBGaWx0ZXIuICoqL1xuICAgIHByaXZhdGUgZmlsdGVyO1xuICAgIHByaXZhdGUgY2xlYXJGaWx0ZXJJbnB1dDtcbiAgICBwcml2YXRlIHNldE11bHRpcGxlRmlsdGVySW5wdXQ7XG4gICAgLyoqIEtleXMuICoqL1xuICAgIHByaXZhdGUgS0VZUztcbiAgICBwcml2YXRlIGhhbmRsZVNlbGVjdENvbnRhaW5lcktleWRvd247XG4gICAgcHJpdmF0ZSBoYW5kbGVNdWx0aXBsZUZpbHRlcktleWRvd247XG4gICAgcHJpdmF0ZSBoYW5kbGVTaW5nbGVGaWx0ZXJLZXlkb3duO1xuICAgIC8qKiBWaWV3LiAqKi9cbiAgICBfYmx1cigpOiB2b2lkO1xuICAgIF9mb2N1cygpOiB2b2lkO1xuICAgIF9mb2N1c1NlbGVjdENvbnRhaW5lcigpOiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlV2lkdGg7XG4gICAgcHJpdmF0ZSB1cGRhdGVQb3NpdGlvbjtcbiAgICBwcml2YXRlIHVwZGF0ZUZpbHRlcldpZHRoO1xufVxuIl19
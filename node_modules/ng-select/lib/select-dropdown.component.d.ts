import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';
import { Option } from './option';
import { OptionList } from './option-list';
import * as ɵngcc0 from '@angular/core';
export declare class SelectDropdownComponent implements AfterViewInit, OnChanges, OnInit {
    hostElement: ElementRef;
    filterEnabled: boolean;
    highlightColor: string;
    highlightTextColor: string;
    left: number;
    multiple: boolean;
    notFoundMsg: string;
    optionList: OptionList;
    isBelow: boolean;
    top: number;
    width: number;
    placeholder: string;
    optionTemplate: TemplateRef<any>;
    optionClicked: EventEmitter<Option>;
    optionsListClick: EventEmitter<null>;
    singleFilterClick: EventEmitter<null>;
    singleFilterFocus: EventEmitter<null>;
    singleFilterInput: EventEmitter<string>;
    singleFilterKeydown: EventEmitter<any>;
    filterInput: any;
    optionsList: any;
    disabledColor: string;
    disabledTextColor: string;
    constructor(hostElement: ElementRef);
    /** Event handlers. **/
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    onOptionsListClick(): void;
    onSingleFilterClick(): void;
    onSingleFilterInput(event: any): void;
    onSingleFilterKeydown(event: any): void;
    onSingleFilterFocus(): void;
    onOptionsWheel(event: any): void;
    onOptionMouseover(option: Option): void;
    onOptionClick(option: Option): void;
    /** Initialization. **/
    private optionsReset;
    /** View. **/
    getOptionStyle(option: Option): any;
    moveHighlightedIntoView(): void;
    private handleOptionsWheel;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectDropdownComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SelectDropdownComponent, "select-dropdown", never, {
    "filterEnabled": "filterEnabled";
    "highlightColor": "highlightColor";
    "highlightTextColor": "highlightTextColor";
    "left": "left";
    "multiple": "multiple";
    "notFoundMsg": "notFoundMsg";
    "optionList": "optionList";
    "isBelow": "isBelow";
    "top": "top";
    "width": "width";
    "placeholder": "placeholder";
    "optionTemplate": "optionTemplate";
}, {
    "optionClicked": "optionClicked";
    "optionsListClick": "optionsListClick";
    "singleFilterClick": "singleFilterClick";
    "singleFilterFocus": "singleFilterFocus";
    "singleFilterInput": "singleFilterInput";
    "singleFilterKeydown": "singleFilterKeydown";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWRyb3Bkb3duLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzZWxlY3QtZHJvcGRvd24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9vcHRpb24nO1xuaW1wb3J0IHsgT3B0aW9uTGlzdCB9IGZyb20gJy4vb3B0aW9uLWxpc3QnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VsZWN0RHJvcGRvd25Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgZmlsdGVyRW5hYmxlZDogYm9vbGVhbjtcbiAgICBoaWdobGlnaHRDb2xvcjogc3RyaW5nO1xuICAgIGhpZ2hsaWdodFRleHRDb2xvcjogc3RyaW5nO1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBub3RGb3VuZE1zZzogc3RyaW5nO1xuICAgIG9wdGlvbkxpc3Q6IE9wdGlvbkxpc3Q7XG4gICAgaXNCZWxvdzogYm9vbGVhbjtcbiAgICB0b3A6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgb3B0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgb3B0aW9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE9wdGlvbj47XG4gICAgb3B0aW9uc0xpc3RDbGljazogRXZlbnRFbWl0dGVyPG51bGw+O1xuICAgIHNpbmdsZUZpbHRlckNsaWNrOiBFdmVudEVtaXR0ZXI8bnVsbD47XG4gICAgc2luZ2xlRmlsdGVyRm9jdXM6IEV2ZW50RW1pdHRlcjxudWxsPjtcbiAgICBzaW5nbGVGaWx0ZXJJbnB1dDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgc2luZ2xlRmlsdGVyS2V5ZG93bjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZmlsdGVySW5wdXQ6IGFueTtcbiAgICBvcHRpb25zTGlzdDogYW55O1xuICAgIGRpc2FibGVkQ29sb3I6IHN0cmluZztcbiAgICBkaXNhYmxlZFRleHRDb2xvcjogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGhvc3RFbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICAvKiogRXZlbnQgaGFuZGxlcnMuICoqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvbk9wdGlvbnNMaXN0Q2xpY2soKTogdm9pZDtcbiAgICBvblNpbmdsZUZpbHRlckNsaWNrKCk6IHZvaWQ7XG4gICAgb25TaW5nbGVGaWx0ZXJJbnB1dChldmVudDogYW55KTogdm9pZDtcbiAgICBvblNpbmdsZUZpbHRlcktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25TaW5nbGVGaWx0ZXJGb2N1cygpOiB2b2lkO1xuICAgIG9uT3B0aW9uc1doZWVsKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uT3B0aW9uTW91c2VvdmVyKG9wdGlvbjogT3B0aW9uKTogdm9pZDtcbiAgICBvbk9wdGlvbkNsaWNrKG9wdGlvbjogT3B0aW9uKTogdm9pZDtcbiAgICAvKiogSW5pdGlhbGl6YXRpb24uICoqL1xuICAgIHByaXZhdGUgb3B0aW9uc1Jlc2V0O1xuICAgIC8qKiBWaWV3LiAqKi9cbiAgICBnZXRPcHRpb25TdHlsZShvcHRpb246IE9wdGlvbik6IGFueTtcbiAgICBtb3ZlSGlnaGxpZ2h0ZWRJbnRvVmlldygpOiB2b2lkO1xuICAgIHByaXZhdGUgaGFuZGxlT3B0aW9uc1doZWVsO1xufVxuIl19